# Build upstream NuttX every day and test
# TODO: Auto-deploy to BL602 after build, capture the UART output and look for errors
# TODO: Use an SBC (Rock64) to auto-flash BL602 over UART (USB)
# TODO: SBC will toggle GPIO 8 to set the flashing mode
# TODO: SBC will restart BL602 before and after flashing
# Why are we doing this? So that we can pick a stable upstream version of NuttX to merge into our fork of NuttX

name: BL602 Upstream

on:

  # Run every day at 1:00 UTC
  schedule:
    - cron: '0 1 * * *'

  # Run on every pull request
  # pull_request:
  #   branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Install Build Tools
      run:  |
        sudo apt -y install \
        bison flex gettext texinfo libncurses5-dev libncursesw5-dev \
        gperf automake libtool pkg-config build-essential gperf genromfs \
        libgmp-dev libmpc-dev libmpfr-dev libisl-dev binutils-dev libelf-dev \
        libexpat-dev gcc-multilib g++-multilib picocom u-boot-tools util-linux \
        kconfig-frontends \
        wget

    - name: Install Toolchain
      run:  |
        wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz
        tar -xvf riscv64-unknown-elf-gcc*.tar.gz

    - name: Checkout Source Files
      run:  |
        mkdir nuttx
        cd nuttx
        git clone https://github.com/apache/incubator-nuttx nuttx
        git clone https://github.com/apache/incubator-nuttx-apps apps
          
    - name: Build
      run: |
        export PATH=$PATH:$PWD/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14/bin
        cd nuttx/nuttx
        
        # Configure the build
        ./tools/configure.sh bl602evb:nsh
        
        # Run the build
        make

        # Dump the disassembly to nuttx.S
        riscv64-unknown-elf-objdump \
          -t -S --demangle --line-numbers --wide \
          nuttx \
          >nuttx.S \
          2>&1

    - name: Upload Build Outputs
      uses: actions/upload-artifact@v2
      with:
        name: nuttx.zip
        path: nuttx/nuttx/nuttx*

    - name: Zip Build Outputs
      run: |
        cd nuttx/nuttx
        zip nuttx.zip nuttx*

    - name: Get Current Date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
        
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: upstream-${{ steps.date.outputs.date }}
        release_name: upstream-${{ steps.date.outputs.date }}
        draft: true
        prerelease: false

    - name: Upload Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: nuttx/nuttx/nuttx.zip
        asset_name: nuttx.zip
        asset_content_type: application/zip

    - name: Publish Release
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
